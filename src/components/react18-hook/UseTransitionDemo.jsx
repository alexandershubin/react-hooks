import { useState, useTransition } from 'react'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å —Ç—è–∂–µ–ª—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
function HeavyList({ filter }) {
  const items = []
  for (let i = 1; i <= 8000; i++) {
    if (filter === '' || i.toString().includes(filter)) {
      items.push(i)
    }
  }

  return (
    <div style={{
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fill, minmax(60px, 1fr))',
      gap: '8px',
      marginTop: '15px'
    }}>
      {items.slice(0, 200).map(item => (
        <div
          key={item}
          style={{
            padding: '10px',
            backgroundColor: '#374151',
            color: '#f3f4f6',
            borderRadius: '4px',
            textAlign: 'center',
            fontSize: '14px'
          }}
        >
          {item}
        </div>
      ))}
      {items.length > 200 && (
        <div style={{
          gridColumn: '1 / -1',
          padding: '10px',
          backgroundColor: '#1f2937',
          color: '#9ca3af',
          borderRadius: '4px',
          textAlign: 'center',
          fontSize: '14px'
        }}>
          ...–∏ –µ—â–µ {items.length - 200} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ {items.length})
        </div>
      )}
    </div>
  )
}

// –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function TabContent({ tab }) {
  const content = {
    about: {
      title: '–û –ø—Ä–æ–µ–∫—Ç–µ',
      text: 'React 19 –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.'
    },
    posts: {
      title: '–ü–æ—Å—Ç—ã',
      text: '–ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å —Ç—ã—Å—è—á–∏ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å...'
    },
    contact: {
      title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      text: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.'
    }
  }

  const { title, text } = content[tab]

  // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—è–∂–µ–ª–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const items = []
  for (let i = 0; i < 500; i++) {
    items.push(`${title} - –≠–ª–µ–º–µ–Ω—Ç ${i + 1}`)
  }

  return (
    <div>
      <h3 style={{ color: '#f3f4f6', marginTop: 0 }}>{title}</h3>
      <p style={{ color: '#d1d5db' }}>{text}</p>
      <div style={{ marginTop: '15px', maxHeight: '200px', overflowY: 'auto' }}>
        {items.slice(0, 50).map((item, index) => (
          <div
            key={index}
            style={{
              padding: '8px',
              margin: '4px 0',
              backgroundColor: '#374151',
              color: '#f3f4f6',
              borderRadius: '4px',
              fontSize: '13px'
            }}
          >
            {item}
          </div>
        ))}
      </div>
    </div>
  )
}

function UseTransitionDemo() {
  const [filter, setFilter] = useState('')
  const [tab, setTab] = useState('about')
  const [isPending, startTransition] = useTransition()
  const [withoutTransition, setWithoutTransition] = useState(false)

  const handleFilterChange = (value) => {
    setFilter(value)
    if (!withoutTransition) {
      startTransition(() => {
        // –¢—è–∂–µ–ª–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–µ—Ä–Ω—É—Ç–æ –≤ transition
      })
    }
  }

  const handleTabChange = (newTab) => {
    if (!withoutTransition) {
      startTransition(() => {
        setTab(newTab)
      })
    } else {
      setTab(newTab)
    }
  }

  return (
    <div style={{
      padding: '20px',
      maxWidth: '1200px',
      margin: '0 auto',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    }}>
      <h2 style={{ color: '#f3f4f6', marginBottom: '10px' }}>
        useTransition - –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      </h2>

      <div style={{
        backgroundColor: '#1e40af',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        marginBottom: '20px'
      }}>
        <h3 style={{ margin: '0 0 10px 0' }}>üí° –ß—Ç–æ –¥–µ–ª–∞–µ—Ç useTransition?</h3>
        <ul style={{ margin: 0, paddingLeft: '20px' }}>
          <li>–ü–æ–º–µ—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ (–Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)</li>
          <li>–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á</li>
          <li>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä isPending –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏</li>
          <li>–£–ª—É—á—à–∞–µ—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö</li>
        </ul>
      </div>

      <div style={{
        backgroundColor: '#374151',
        padding: '20px',
        borderRadius: '8px',
        marginBottom: '20px'
      }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginBottom: '20px'
        }}>
          <h3 style={{ color: '#f3f4f6', margin: 0 }}>üéØ –î–µ–º–æ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞</h3>
          <label style={{ color: '#f3f4f6', display: 'flex', alignItems: 'center', gap: '8px' }}>
            <input
              type="checkbox"
              checked={withoutTransition}
              onChange={(e) => setWithoutTransition(e.target.checked)}
              style={{ width: '18px', height: '18px', cursor: 'pointer' }}
            />
            –ë–µ–∑ useTransition (–º–µ–¥–ª–µ–Ω–Ω–æ)
          </label>
        </div>

        <div style={{ marginBottom: '15px' }}>
          <label style={{
            display: 'block',
            color: '#f3f4f6',
            marginBottom: '8px',
            fontWeight: 'bold'
          }}>
            –§–∏–ª—å—Ç—Ä —á–∏—Å–µ–ª:
          </label>
          <input
            type="text"
            value={filter}
            onChange={(e) => handleFilterChange(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏..."
            style={{
              width: '100%',
              padding: '12px',
              fontSize: '16px',
              borderRadius: '6px',
              border: `2px solid ${isPending ? '#fbbf24' : '#60a5fa'}`,
              backgroundColor: '#1f2937',
              color: '#f3f4f6',
              outline: 'none'
            }}
          />
          {isPending && (
            <div style={{
              marginTop: '8px',
              padding: '8px',
              backgroundColor: '#fef3c7',
              color: '#92400e',
              borderRadius: '4px',
              fontSize: '14px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <span style={{ animation: 'spin 1s linear infinite' }}>‚è≥</span>
              –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è... –í–≤–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–º!
            </div>
          )}
        </div>

        <HeavyList filter={filter} />
      </div>

      <div style={{
        backgroundColor: '#374151',
        padding: '20px',
        borderRadius: '8px',
        marginBottom: '20px'
      }}>
        <h3 style={{ color: '#f3f4f6', marginTop: 0 }}>üéØ –î–µ–º–æ 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫</h3>

        <div style={{
          display: 'flex',
          gap: '10px',
          marginBottom: '20px',
          borderBottom: '2px solid #4b5563',
          paddingBottom: '10px'
        }}>
          {['about', 'posts', 'contact'].map((tabName) => (
            <button
              key={tabName}
              onClick={() => handleTabChange(tabName)}
              style={{
                padding: '10px 20px',
                fontSize: '14px',
                backgroundColor: tab === tabName ? '#3b82f6' : '#1f2937',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                transition: 'all 0.2s',
                opacity: isPending && tab !== tabName ? 0.5 : 1
              }}
            >
              {tabName === 'about' && 'üìñ –û –ø—Ä–æ–µ–∫—Ç–µ'}
              {tabName === 'posts' && 'üìù –ü–æ—Å—Ç—ã'}
              {tabName === 'contact' && 'üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã'}
            </button>
          ))}
        </div>

        {isPending && (
          <div style={{
            padding: '12px',
            backgroundColor: '#fef3c7',
            color: '#92400e',
            borderRadius: '6px',
            marginBottom: '15px',
            fontSize: '14px'
          }}>
            ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–∫–∏...
          </div>
        )}

        <div style={{
          backgroundColor: '#1f2937',
          padding: '20px',
          borderRadius: '6px',
          opacity: isPending ? 0.6 : 1,
          transition: 'opacity 0.2s'
        }}>
          <TabContent tab={tab} />
        </div>
      </div>

      <div style={{
        backgroundColor: '#065f46',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        marginBottom: '20px'
      }}>
        <h3 style={{ margin: '0 0 10px 0' }}>‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useTransition</h3>
        <ul style={{ margin: 0, paddingLeft: '20px' }}>
          <li><strong>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫</strong> - –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã</li>
          <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è/–ø–æ–∏—Å–∫</strong> - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
          <li><strong>–ù–∞–≤–∏–≥–∞—Ü–∏—è</strong> - –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã</li>
          <li><strong>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤</strong> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏</li>
        </ul>
      </div>

      <div style={{
        backgroundColor: '#1f2937',
        padding: '15px',
        borderRadius: '8px',
        color: '#f3f4f6'
      }}>
        <h3 style={{ marginTop: 0 }}>üìù –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞</h3>
        <pre style={{
          backgroundColor: '#111827',
          padding: '15px',
          borderRadius: '6px',
          overflow: 'auto',
          fontSize: '13px'
        }}>
{`import { useState, useTransition } from 'react'

function TabContainer() {
  const [tab, setTab] = useState('home')
  const [isPending, startTransition] = useTransition()

  const handleTabChange = (newTab) => {
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç—è–∂–µ–ª–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startTransition(() => {
      setTab(newTab)
    })
  }

  return (
    <div>
      <button onClick={() => handleTabChange('home')}>
        –ì–ª–∞–≤–Ω–∞—è
      </button>
      <button onClick={() => handleTabChange('posts')}>
        –ü–æ—Å—Ç—ã
      </button>

      {isPending && <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}

      <div style={{ opacity: isPending ? 0.5 : 1 }}>
        <TabContent tab={tab} />
      </div>
    </div>
  )
}`}
        </pre>
      </div>

      <div style={{
        backgroundColor: '#7c2d12',
        color: 'white',
        padding: '15px',
        borderRadius: '8px',
        marginTop: '20px'
      }}>
        <h3 style={{ margin: '0 0 10px 0' }}>‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</h3>
        <ul style={{ margin: 0, paddingLeft: '20px' }}>
          <li>useTransition vs useDeferredValue: transition –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
          <li>Transitions –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω—ã –Ω–æ–≤—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏</li>
          <li>isPending –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏</li>
          <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–ª–∞—Ç–µ–∂–∏, —Ñ–æ—Ä–º—ã)</li>
        </ul>
      </div>

      <style>{`
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  )
}

export default UseTransitionDemo