import { useRef, useState, useEffect, useCallback } from 'react'

function UseRefDemo() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [messages, setMessages] = useState([]);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  const [refLog, setRefLog] = useState([]);
  const componentRenderCount = useRef(0);
  componentRenderCount.current += 1;
  
  // –†–∞–∑–ª–∏—á–Ω—ã–µ useRef –ø—Ä–∏–º–µ—Ä—ã
  const inputRef = useRef(null);
  const fileInputRef = useRef(null);
  const canvasRef = useRef(null);
  const messagesEndRef = useRef(null);
  const intervalRef = useRef(null);
  const previousCountRef = useRef(0);
  const mousePositionRef = useRef({ x: 0, y: 0 });
  const lastClickTimeRef = useRef(0);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ref
  const logRefUsage = (refType, description, action) => {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = {
      id: Date.now() + Math.random(),
      timestamp,
      refType,
      description,
      action,
      render: componentRenderCount.current
    };
    
    setRefLog(prev => [logEntry, ...prev].slice(0, 12));
  };

  // –ü—Ä–∏–º–µ—Ä 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º
  const focusInput = () => {
    if (inputRef.current) {
      inputRef.current.focus();
      console.log('üéØ useRef: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ input');
      logRefUsage('DOM', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ input', 'focus()');
    }
  };

  const selectAllText = () => {
    if (inputRef.current) {
      inputRef.current.select();
      console.log('üéØ useRef: –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ input');
      logRefUsage('DOM', '–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ input', 'select()');
    }
  };

  const clearInput = () => {
    if (inputRef.current) {
      inputRef.current.value = '';
      setName('');
      inputRef.current.focus();
      console.log('üéØ useRef: –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ–∫—É—Å –Ω–∞ input');
      logRefUsage('DOM', '–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ–∫—É—Å –Ω–∞ input', 'value = ""');
    }
  };

  // –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
  const triggerFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
      console.log('üéØ useRef: –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫ –ø–æ file input');
      logRefUsage('DOM', '–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫ –ø–æ file input', 'click()');
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log(`üéØ useRef: –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name}`);
      logRefUsage('DOM', `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name}`, 'file selected');
    }
  };


  // –ü—Ä–∏–º–µ—Ä 4: Canvas —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
  const drawOnCanvas = () => {
    if (canvasRef.current) {
      const ctx = canvasRef.current.getContext('2d');
      
      // –û—á–∏—Å—Ç–∫–∞ canvas
      ctx.clearRect(0, 0, 300, 150);
      
      // –†–∏—Å–æ–≤–∞–Ω–∏–µ
      ctx.fillStyle = '#3b82f6';
      ctx.fillRect(50, 50, 100, 50);
      
      ctx.fillStyle = '#ef4444';
      ctx.beginPath();
      ctx.arc(200, 75, 30, 0, 2 * Math.PI);
      ctx.fill();
      
      ctx.fillStyle = '#10b981';
      ctx.fillText(`–†–µ–Ω–¥–µ—Ä #${componentRenderCount.current}`, 10, 20);
      
      console.log('üéØ useRef: –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ canvas');
      logRefUsage('DOM', '–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ canvas', 'draw');
    }
  };

  // –ü—Ä–∏–º–µ—Ä 5: –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
  useEffect(() => {
    previousCountRef.current = count;
    // –£–±–∏—Ä–∞–µ–º logRefUsage —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
    console.log(`üéØ useRef: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ count: ${count}`);
  });

  const getPreviousCount = () => {
    return previousCountRef.current;
  };

  // –ü—Ä–∏–º–µ—Ä 6: –¢–∞–π–º–µ—Ä —Å useRef
  const startTimer = () => {
    if (!isTimerRunning) {
      intervalRef.current = setInterval(() => {
        setCount(prev => prev + 1);
      }, 1000);
      setIsTimerRunning(true);
      console.log('üéØ useRef: –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞');
      logRefUsage('Timer', '–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞', 'setInterval');
    }
  };

  const stopTimer = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
      setIsTimerRunning(false);
      console.log('üéØ useRef: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞');
      logRefUsage('Timer', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞', 'clearInterval');
    }
  };

  // –ü—Ä–∏–º–µ—Ä 7: –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
  const addMessage = () => {
    const newMessage = `–°–æ–æ–±—â–µ–Ω–∏–µ #${messages.length + 1} –≤ ${new Date().toLocaleTimeString()}`;
    setMessages(prev => [...prev, newMessage]);
    console.log('üéØ useRef: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    logRefUsage('DOM', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è', 'scroll to bottom');
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // –ü—Ä–∏–º–µ—Ä 8: –ò–∑–º–µ—Ä–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const measureCanvas = () => {
    if (canvasRef.current) {
      const rect = canvasRef.current.getBoundingClientRect();
      console.log(`üéØ useRef: –†–∞–∑–º–µ—Ä—ã canvas: ${rect.width}x${rect.height}`);
      logRefUsage('DOM', `–†–∞–∑–º–µ—Ä—ã canvas: ${rect.width}x${rect.height}`, 'getBoundingClientRect');
      alert(`Canvas —Ä–∞–∑–º–µ—Ä—ã: ${rect.width}px x ${rect.height}px`);
    }
  };

  // –ü—Ä–∏–º–µ—Ä 9: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞
  const handleMouseMove = useCallback((e) => {
    mousePositionRef.current = { x: e.clientX, y: e.clientY };
    // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setState, –ø–æ—ç—Ç–æ–º—É —Ä–µ–Ω–¥–µ—Ä –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
  }, []);

  const showMousePosition = () => {
    const pos = mousePositionRef.current;
    console.log(`üéØ useRef: –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ${pos.x}, ${pos.y}`);
    logRefUsage('Value', `–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ${pos.x}, ${pos.y}`, 'read');
    alert(`–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏: ${pos.x}, ${pos.y}`);
  };

  useEffect(() => {
    document.addEventListener('mousemove', handleMouseMove);
    return () => document.removeEventListener('mousemove', handleMouseMove);
  }, [handleMouseMove]);

  // –ü—Ä–∏–º–µ—Ä 10: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
  const handleExpensiveOperation = () => {
    const now = Date.now();
    const timeSinceLastClick = now - lastClickTimeRef.current;
    
    if (timeSinceLastClick < 1000) {
      console.log(`üéØ useRef: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${timeSinceLastClick}ms`);
      logRefUsage('Value', `–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${timeSinceLastClick}ms`, 'throttle');
      alert('–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É.');
      return;
    }
    
    lastClickTimeRef.current = now;
    console.log('üéØ useRef: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
    logRefUsage('Value', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏', 'execute');
    alert('–î–æ—Ä–æ–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
  };

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  return (
    <div>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 1000,
        backgroundColor: '#0c1119',
        color: '#f8fafc',
        padding: '8px 16px',
        fontSize: '11px',
        fontFamily: 'monospace',
        borderBottom: '2px solid #1e293b',
        boxShadow: '0 2px 8px rgba(0,0,0,0.3)',
        maxHeight: '100px',
        overflow: 'hidden'
      }}>
        <div style={{ display: 'flex', gap: '20px', maxWidth: '1400px', margin: '0 auto' }}>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div style={{ minWidth: '200px' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
              üéØ useRef –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
            </div>
            <div style={{ fontSize: '10px', display: 'grid', gap: '1px' }}>
              <div>–†–µ–Ω–¥–µ—Ä–æ–≤: <span style={{color: '#ef4444'}}>{componentRenderCount.current}</span></div>
              <div>Count: <span style={{color: '#3b82f6'}}>{count}</span> (prev: {getPreviousCount()})</div>
              <div>–¢–∞–π–º–µ—Ä: <span style={{color: isTimerRunning ? '#10b981' : '#6b7280'}}>{isTimerRunning ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</span></div>
              <div>–°–æ–æ–±—â–µ–Ω–∏–π: <span style={{color: '#8b5cf6'}}>{messages.length}</span></div>
            </div>
          </div>
          
          {/* –õ–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ref */}
          <div style={{ flex: 1, minWidth: '500px' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
              üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ref:
            </div>
            <div style={{ 
              display: 'flex', 
              flexDirection: 'column', 
              gap: '1px', 
              maxHeight: '60px', 
              overflowY: 'auto' 
            }}>
              {refLog.slice(0, 3).map(log => (
                <div key={log.id} style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  fontSize: '9px',
                  padding: '1px 3px',
                  borderRadius: '2px',
                  backgroundColor: 'rgba(30, 41, 59, 0.4)'
                }}>
                  <span style={{ color: '#94a3b8' }}>{log.timestamp}</span>
                  <span style={{ 
                    color: log.refType === 'DOM' ? '#3b82f6' : 
                          log.refType === 'Timer' ? '#10b981' : '#f59e0b',
                    fontWeight: 'bold',
                    minWidth: '40px',
                    fontSize: '8px'
                  }}>
                    {log.refType}
                  </span>
                  <span style={{ color: '#e2e8f0', flex: 1, fontSize: '8px' }}>
                    {log.description}
                  </span>
                  <span style={{ 
                    color: '#64748b',
                    fontSize: '8px',
                    minWidth: '30px',
                    textAlign: 'right'
                  }}>
                    R#{log.render}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –û—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */}
      <div style={{ paddingTop: '110px' }}>
        <h2>üéØ useRef Hook</h2>
        <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –°–æ–∑–¥–∞–Ω–∏–µ –º—É—Ç–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –¥–æ—Å—Ç—É–ø –∫ DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º</p>
        
        <div className="code-block">
{`const ref = useRef(initialValue);

// –î–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const inputRef = useRef(null);
<input ref={inputRef} />
inputRef.current.focus();

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
const countRef = useRef(0);
countRef.current = newValue;`}
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
        <div className="demo-container">
          <h3>1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏</h3>
          <div className="interactive-demo">
            <div style={{ marginBottom: '15px' }}>
              <input
                ref={inputRef}
                className="input-demo"
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
                style={{ width: '300px', marginRight: '10px' }}
              />
            </div>
            
            <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
              <button className="btn" onClick={focusInput}>
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å
              </button>
              <button className="btn" onClick={selectAllText}>
                –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë
              </button>
              <button className="btn" onClick={clearInput}>
                –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>
          <div className="code-block">
{`const inputRef = useRef(null);

const focusInput = () => {
  if (inputRef.current) {
    inputRef.current.focus();
  }
};

<input ref={inputRef} type="text" />
<button onClick={focusInput}>–§–æ–∫—É—Å</button>`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ */}
        <div className="demo-container">
          <h3>2. –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ input[type="file"]</h3>
          <div className="interactive-demo">
            <input
              ref={fileInputRef}
              type="file"
              onChange={handleFileChange}
              style={{ display: 'none' }}
              accept="image/*"
            />
            <button className="btn" onClick={triggerFileInput}>
              üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
            </button>
            <p style={{ fontSize: '14px', color: '#6b7280', marginTop: '10px' }}>
              –°–∫—Ä—ã—Ç—ã–π input –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —á–µ—Ä–µ–∑ ref.current.click()
            </p>
          </div>
          <div className="code-block">
{`const fileInputRef = useRef(null);

const triggerFileInput = () => {
  fileInputRef.current.click();
};

<input 
  ref={fileInputRef}
  type="file" 
  style={{ display: 'none' }}
  onChange={handleFileChange}
/>
<button onClick={triggerFileInput}>–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 3: Canvas —Ä–∏—Å–æ–≤–∞–Ω–∏–µ */}
        <div className="demo-container">
          <h3>3. –†–∞–±–æ—Ç–∞ —Å Canvas</h3>
          <div className="interactive-demo">
            <canvas
              ref={canvasRef}
              width={300}
              height={150}
              style={{ 
                border: '2px solid #e5e7eb', 
                borderRadius: '6px', 
                backgroundColor: '#f9fafb',
                marginBottom: '10px'
              }}
            />
            <div style={{ display: 'flex', gap: '10px' }}>
              <button className="btn" onClick={drawOnCanvas}>
                üé® –†–∏—Å–æ–≤–∞—Ç—å
              </button>
              <button className="btn" onClick={measureCanvas}>
                üìè –ò–∑–º–µ—Ä–∏—Ç—å
              </button>
            </div>
          </div>
          <div className="code-block">
{`const canvasRef = useRef(null);

const drawOnCanvas = () => {
  const ctx = canvasRef.current.getContext('2d');
  ctx.fillStyle = '#3b82f6';
  ctx.fillRect(50, 50, 100, 50);
};

<canvas ref={canvasRef} width={300} height={150} />`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 4: –¢–∞–π–º–µ—Ä —Å ref */}
        <div className="demo-container">
          <h3>4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞–º–∏</h3>
          <div className="interactive-demo">
            <div style={{ marginBottom: '15px' }}>
              <div className="counter">{count}</div>
              <div style={{ fontSize: '14px', color: '#6b7280' }}>
                –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {getPreviousCount()}
              </div>
            </div>
            
            <div style={{ display: 'flex', gap: '10px' }}>
              <button 
                className="btn" 
                onClick={startTimer}
                disabled={isTimerRunning}
              >
                ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
              </button>
              <button 
                className="btn" 
                onClick={stopTimer}
                disabled={!isTimerRunning}
              >
                ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
              </button>
              <button 
                className="btn" 
                onClick={() => setCount(0)}
              >
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>
          <div className="code-block">
{`const intervalRef = useRef(null);
const previousCountRef = useRef(0);

const startTimer = () => {
  intervalRef.current = setInterval(() => {
    setCount(prev => prev + 1);
  }, 1000);
};

const stopTimer = () => {
  clearInterval(intervalRef.current);
  intervalRef.current = null;
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
useEffect(() => {
  previousCountRef.current = count;
});`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 5: –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="demo-container">
          <h3>5. –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
          <div className="interactive-demo">
            <button className="btn" onClick={addMessage} style={{ marginBottom: '10px' }}>
              üí¨ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            </button>
            
            <div style={{
              height: '150px',
              overflowY: 'auto',
              border: '1px solid #e5e7eb',
              borderRadius: '6px',
              padding: '10px',
              backgroundColor: '#f9fafb'
            }}>
              {messages.map((message, index) => (
                <div key={index} style={{ 
                  padding: '5px 0', 
                  borderBottom: index < messages.length - 1 ? '1px solid #e5e7eb' : 'none',
                  fontSize: '14px'
                }}>
                  {message}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </div>
          <div className="code-block">
{`const messagesEndRef = useRef(null);

// –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
useEffect(() => {
  messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
}, [messages]);

<div className="messages-container">
  {messages.map(message => <div key={message.id}>{message.text}</div>)}
  <div ref={messagesEndRef} /> {/* –Ø–∫–æ—Ä—å –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ */}
</div>`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 6: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞ */}
        <div className="demo-container">
          <h3>6. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞</h3>
          <div className="interactive-demo">
            <div style={{ marginBottom: '15px' }}>
              <button className="btn" onClick={showMousePosition}>
                üñ±Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
              </button>
              <button className="btn" onClick={handleExpensiveOperation}>
                ‚ö° –î–æ—Ä–æ–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (throttled)
              </button>
            </div>
            
            <div style={{ fontSize: '14px', color: '#6b7280' }}>
              <p>–î–≤–∏–≥–∞–π—Ç–µ –º—ã—à—å—é, –ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ ref –±–µ–∑ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞</p>
              <p>–ö–Ω–æ–ø–∫–∞ "–î–æ—Ä–æ–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è" –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç —Å–ø–∞–º–∞ (throttling)</p>
            </div>
          </div>
          <div className="code-block">
{`const mousePositionRef = useRef({ x: 0, y: 0 });
const lastClickTimeRef = useRef(0);

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞
const handleMouseMove = useCallback((e) => {
  mousePositionRef.current = { x: e.clientX, y: e.clientY };
  // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setState!
}, []);

// Throttling —Å –ø–æ–º–æ—â—å—é ref
const handleClick = () => {
  const now = Date.now();
  if (now - lastClickTimeRef.current < 1000) {
    return; // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –∫–ª–∏–∫–∏
  }
  lastClickTimeRef.current = now;
  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
};`}
          </div>
        </div>

        <div className="info-box blue">
          <h4 className="mt-0">üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useRef:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–î–æ—Å—Ç—É–ø –∫ DOM:</strong> —Ñ–æ–∫—É—Å, —Å–∫—Ä–æ–ª–ª, –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤</li>
            <li><strong>–•—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π:</strong> –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä</li>
            <li><strong>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏:</strong> –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–π–º–µ—Ä—ã</li>
            <li><strong>–ú—É—Ç–∞–±–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> —Å—á–µ—Ç—á–∏–∫–∏, —Ñ–ª–∞–≥–∏, –∫—ç—à</li>
            <li><strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏:</strong> —Ç—Ä–µ—Ç—å–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏</li>
          </ul>
        </div>

        <div className="info-box yellow">
          <h4 className="mt-0">‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ useRef:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–Ω–¥–µ—Ä:</strong> –∏–∑–º–µ–Ω–µ–Ω–∏–µ .current –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–Ω–¥–µ—Ä</li>
            <li><strong>–ú—É—Ç–∞–±–µ–ª—å–Ω—ã–π:</strong> –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å .current –Ω–∞–ø—Ä—è–º—É—é</li>
            <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</strong> –æ–±—ä–µ–∫—Ç ref –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏</li>
            <li><strong>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</li>
            <li><strong>Cleanup:</strong> –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—á–∏—â–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏</li>
          </ul>
        </div>

        <div className="info-box green">
          <h4 className="mt-0">‚úÖ –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ ref.current:</strong> –Ω–∞ null –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º</li>
            <li><strong>–û—á–∏—â–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã:</strong> –≤ useEffect cleanup</li>
            <li><strong>–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ:</strong> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ state –¥–ª—è UI —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
            <li><strong>–¢–∏–ø–∏–∑–∞—Ü–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ TypeScript</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default UseRefDemo