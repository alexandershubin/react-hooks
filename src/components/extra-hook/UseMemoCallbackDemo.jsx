import { useState, useMemo, useCallback, useRef, useEffect } from 'react'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ React.memo
const ExpensiveChild = ({ items, onItemClick, theme }) => {
  const renderCount = useRef(0);
  renderCount.current += 1;
  
  console.log('ExpensiveChild —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è:', renderCount.current);
  
  return (
    <div style={{
      padding: '10px',
      border: '2px solid',
      borderColor: theme === 'dark' ? '#374151' : '#e5e7eb',
      backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff',
      color: theme === 'dark' ? '#f3f4f6' : '#374151',
      borderRadius: '6px',
      marginTop: '10px'
    }}>
      <h4 style={{ margin: '0 0 10px 0' }}>
        üîÑ –î–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (—Ä–µ–Ω–¥–µ—Ä–æ–≤: {renderCount.current})
      </h4>
      <div style={{ fontSize: '12px', marginBottom: '10px' }}>
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items.length}
      </div>
      {items.slice(0, 3).map(item => (
        <button
          key={item.id}
          onClick={() => onItemClick(item.id)}
          style={{
            margin: '2px',
            padding: '4px 8px',
            fontSize: '12px',
            backgroundColor: theme === 'dark' ? '#374151' : '#f3f4f6',
            color: theme === 'dark' ? '#f3f4f6' : '#374151',
            border: '1px solid #d1d5db',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          {item.name}
        </button>
      ))}
      {items.length > 3 && (
        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '5px' }}>
          ...–∏ –µ—â–µ {items.length - 3} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        </div>
      )}
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç—è–∂–µ–ª—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
const expensiveCalculation = (num) => {
  console.log('üî¥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ—Ä–æ–≥–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ...');
  let result = 0;
  for (let i = 0; i < num * 100000; i++) {
    result += i;
  }
  return result;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ç—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
const filterItems = (items, searchTerm) => {
  console.log('üî¥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è...', items.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  return items.filter(item => 
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
};

function UseMemoCallbackDemo() {
  const [count, setCount] = useState(1);
  const [items, setItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [theme, setTheme] = useState('light');
  const [renderTrigger, setRenderTrigger] = useState(0);
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–Ω–¥–µ—Ä–æ–≤
  const [optimizationLog, setOptimizationLog] = useState([]);
  const componentRenderCount = useRef(0);
  componentRenderCount.current += 1;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const logOptimization = (type, description, wasOptimized) => {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = {
      id: Date.now() + Math.random(),
      timestamp,
      type,
      description,
      wasOptimized,
      render: componentRenderCount.current
    };
    
    setOptimizationLog(prev => [logEntry, ...prev].slice(0, 8));
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const generateItems = () => {
      const items = [];
      for (let i = 0; i < 1000; i++) {
        items.push({
          id: i,
          name: `–≠–ª–µ–º–µ–Ω—Ç ${i}`,
          value: Math.random() * 100
        });
      }
      return items;
    };
    
    setItems(generateItems());
  }, []);

  // ‚ùå –ë–ï–ó useMemo - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
  const expensiveValueWithoutMemo = useMemo(() => {
    console.log('üî¥ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏');
    return expensiveCalculation(count);
  }, [count, renderTrigger]); // –î–æ–±–∞–≤–ª—è–µ–º renderTrigger —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É

  // ‚úÖ –° useMemo - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count
  const expensiveValueWithMemo = useMemo(() => {
    console.log('‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å useMemo');
    return expensiveCalculation(count);
  }, [count]);

  // ‚ùå –ë–ï–ó useMemo - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
  const filteredItemsWithoutMemo = useMemo(() => {
    console.log('üî¥ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏');
    return filterItems(items, searchTerm);
  }, [items, searchTerm, renderTrigger]); // –î–æ–±–∞–≤–ª—è–µ–º renderTrigger

  // ‚úÖ –° useMemo - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ items –∏–ª–∏ searchTerm
  const filteredItemsWithMemo = useMemo(() => {
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å useMemo');
    return filterItems(items, searchTerm);
  }, [items, searchTerm]);

  // ‚ùå –ë–ï–ó useCallback - –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
  const handleItemClickWithoutCallback = (id) => {
    console.log('–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –±–µ–∑ useCallback:', id);
    logOptimization('callback', `–ö–ª–∏–∫ –±–µ–∑ useCallback (id: ${id})`, false);
  };

  // ‚úÖ –° useCallback - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  const handleItemClickWithCallback = useCallback((id) => {
    console.log('–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å useCallback:', id);
    logOptimization('callback', `–ö–ª–∏–∫ —Å useCallback (id: ${id})`, true);
  }, [logOptimization]); // –í–∫–ª—é—á–∞–µ–º logOptimization –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


  // –°–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ useMemo (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä)
  const configWithoutMemo = {
    theme: theme,
    itemCount: items.length,
    timestamp: Date.now() // ‚ùå –í—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!
  };

  // –°–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å useMemo
  const configWithMemo = useMemo(() => {
    logOptimization('object', `–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`, true);
    return {
      theme: theme,
      itemCount: items.length,
      isLargeDataset: items.length > 500
    };
  }, [theme, items.length]);

  return (
    <div>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 1000,
        backgroundColor: '#1e293b',
        color: '#f1f5f9',
        padding: '8px 16px',
        fontSize: '11px',
        fontFamily: 'monospace',
        borderBottom: '2px solid #475569',
        boxShadow: '0 2px 8px rgba(0,0,0,0.3)',
        maxHeight: '110px',
        overflow: 'hidden'
      }}>
        <div style={{ display: 'flex', gap: '20px', maxWidth: '1400px', margin: '0 auto' }}>
          {/* –°—á–µ—Ç—á–∏–∫–∏ */}
          <div style={{ minWidth: '200px' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
              ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
            </div>
            <div style={{ fontSize: '10px', display: 'grid', gap: '2px' }}>
              <div>–†–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: <span style={{color: '#ef4444'}}>{componentRenderCount.current}</span></div>
              <div>Count: <span style={{color: '#3b82f6'}}>{count}</span></div>
              <div>Search: <span style={{color: '#10b981'}}>"{searchTerm}"</span></div>
              <div>Theme: <span style={{color: '#f59e0b'}}>{theme}</span></div>
              <div>Items: <span style={{color: '#8b5cf6'}}>{items.length}</span></div>
            </div>
          </div>
          
          {/* –õ–æ–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π */}
          <div style={{ flex: 1, minWidth: '500px' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
              üìä –õ–æ–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:
            </div>
            <div style={{ 
              display: 'flex', 
              flexDirection: 'column', 
              gap: '1px', 
              maxHeight: '70px', 
              overflowY: 'auto' 
            }}>
              {optimizationLog.slice(0, 4).map(log => (
                <div key={log.id} style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  fontSize: '9px',
                  padding: '1px 3px',
                  borderRadius: '2px',
                  backgroundColor: log.wasOptimized ? 'rgba(16, 185, 129, 0.2)' : 'rgba(239, 68, 68, 0.2)'
                }}>
                  <span style={{ color: '#94a3b8' }}>{log.timestamp}</span>
                  <span style={{ 
                    color: log.wasOptimized ? '#10b981' : '#ef4444',
                    fontWeight: 'bold',
                    minWidth: '60px',
                    fontSize: '8px'
                  }}>
                    {log.wasOptimized ? '‚úÖ' : '‚ùå'} {log.type}
                  </span>
                  <span style={{ color: '#e2e8f0', flex: 1, fontSize: '8px' }}>
                    {log.description}
                  </span>
                  <span style={{ color: '#64748b', fontSize: '8px' }}>
                    R#{log.render}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –û—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */}
      <div style={{ paddingTop: '120px' }}>
        <h2>‚ö° useMemo & useCallback Hooks</h2>
        <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏—é</p>
        
        <div className="code-block">
{`// useMemo - –º–µ–º–æ–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
const memoizedValue = useMemo(() => {
  return expensiveCalculation(dependency);
}, [dependency]);

// useCallback - –º–µ–º–æ–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
const memoizedCallback = useCallback((param) => {
  doSomething(param);
}, [dependency]);`}
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 1: useMemo –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π */}
        <div className="demo-container">
          <h3>1. useMemo –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</h3>
          <div className="interactive-demo">
            <div style={{ display: 'flex', gap: '15px', alignItems: 'center', marginBottom: '15px' }}>
              <label>
                –ß–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: 
                <input
                  type="number"
                  value={count}
                  onChange={(e) => setCount(Number(e.target.value))}
                  style={{ marginLeft: '10px', width: '80px' }}
                />
              </label>
              <button 
                className="btn" 
                onClick={() => setRenderTrigger(prev => prev + 1)}
              >
                –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
              </button>
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
              <div style={{ padding: '10px', backgroundColor: '#fef2f2', borderRadius: '6px', border: '1px solid #fecaca' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#dc2626' }}>‚ùå –ë–µ–∑ useMemo</h4>
                <div style={{ fontSize: '14px' }}>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç: <strong>{expensiveValueWithoutMemo.toLocaleString()}</strong>
                </div>
                <div style={{ fontSize: '12px', color: '#7f1d1d', marginTop: '5px' }}>
                  –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ!
                </div>
              </div>
              
              <div style={{ padding: '10px', backgroundColor: '#f0fdf4', borderRadius: '6px', border: '1px solid #bbf7d0' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#16a34a' }}>‚úÖ –° useMemo</h4>
                <div style={{ fontSize: '14px' }}>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç: <strong>{expensiveValueWithMemo.toLocaleString()}</strong>
                </div>
                <div style={{ fontSize: '12px', color: '#14532d', marginTop: '5px' }}>
                  –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count
                </div>
              </div>
            </div>
          </div>
          <div className="code-block">
{`// ‚ùå –ë–ï–ó useMemo - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
const expensiveValue = expensiveCalculation(count);

// ‚úÖ –° useMemo - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count
const expensiveValue = useMemo(() => {
  return expensiveCalculation(count);
}, [count]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - count`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 2: useMemo –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
        <div className="demo-container">
          <h3>2. useMemo –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤</h3>
          <div className="interactive-demo">
            <div style={{ marginBottom: '15px' }}>
              <input
                className="input-demo"
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤..."
                style={{ width: '300px' }}
              />
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
              <div style={{ padding: '10px', backgroundColor: '#fef2f2', borderRadius: '6px', border: '1px solid #fecaca' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#dc2626' }}>‚ùå –ë–µ–∑ useMemo</h4>
                <div style={{ fontSize: '14px' }}>
                  –ù–∞–π–¥–µ–Ω–æ: <strong>{filteredItemsWithoutMemo.length}</strong> –∏–∑ {items.length}
                </div>
                <div style={{ fontSize: '12px', color: '#7f1d1d', marginTop: '5px' }}>
                  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
                </div>
              </div>
              
              <div style={{ padding: '10px', backgroundColor: '#f0fdf4', borderRadius: '6px', border: '1px solid #bbf7d0' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#16a34a' }}>‚úÖ –° useMemo</h4>
                <div style={{ fontSize: '14px' }}>
                  –ù–∞–π–¥–µ–Ω–æ: <strong>{filteredItemsWithMemo.length}</strong> –∏–∑ {items.length}
                </div>
                <div style={{ fontSize: '12px', color: '#14532d', marginTop: '5px' }}>
                  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                </div>
              </div>
            </div>
          </div>
          <div className="code-block">
{`// ‚ùå –ë–ï–ó useMemo - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
const filteredItems = items.filter(item => 
  item.name.toLowerCase().includes(searchTerm.toLowerCase())
);

// ‚úÖ –° useMemo - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
const filteredItems = useMemo(() => {
  return items.filter(item => 
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
}, [items, searchTerm]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - items –∏ searchTerm`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 3: useCallback –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π */}
        <div className="demo-container">
          <h3>3. useCallback –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π</h3>
          <div className="interactive-demo">
            <div style={{ marginBottom: '15px' }}>
              <button 
                className="btn" 
                onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
              >
                –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É: {theme}
              </button>
            </div>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
              <div>
                <h4 style={{ margin: '0 0 10px 0', color: '#dc2626' }}>‚ùå –ë–µ–∑ useCallback</h4>
                <ExpensiveChild 
                  items={filteredItemsWithMemo.slice(0, 5)}
                  onItemClick={handleItemClickWithoutCallback}
                  theme={theme}
                />
                <div style={{ fontSize: '12px', color: '#7f1d1d', marginTop: '5px' }}>
                  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
                </div>
              </div>
              
              <div>
                <h4 style={{ margin: '0 0 10px 0', color: '#16a34a' }}>‚úÖ –° useCallback</h4>
                <ExpensiveChild 
                  items={filteredItemsWithMemo.slice(0, 5)}
                  onItemClick={handleItemClickWithCallback}
                  theme={theme}
                />
                <div style={{ fontSize: '12px', color: '#14532d', marginTop: '5px' }}>
                  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props
                </div>
              </div>
            </div>
          </div>
          <div className="code-block">
{`// ‚ùå –ë–ï–ó useCallback - –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
const handleClick = (id) => {
  console.log('Clicked:', id);
};

// ‚úÖ –° useCallback - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const handleClick = useCallback((id) => {
  console.log('Clicked:', id);
}, []); // –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

// ‚úÖ useCallback —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
const handleClick = useCallback((id) => {
  console.log('Clicked:', id, 'theme:', theme);
}, [theme]); // –§—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ theme`}
          </div>
        </div>

        {/* –ü—Ä–∏–º–µ—Ä 4: useMemo –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ */}
        <div className="demo-container">
          <h3>4. useMemo –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</h3>
          <div className="interactive-demo">
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>
              <div style={{ padding: '10px', backgroundColor: '#fef2f2', borderRadius: '6px', border: '1px solid #fecaca' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#dc2626' }}>‚ùå –ë–µ–∑ useMemo</h4>
                <pre style={{ fontSize: '12px', margin: 0, whiteSpace: 'pre-wrap' }}>
                  {JSON.stringify(configWithoutMemo, null, 2)}
                </pre>
                <div style={{ fontSize: '12px', color: '#7f1d1d', marginTop: '5px' }}>
                  –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
                </div>
              </div>
              
              <div style={{ padding: '10px', backgroundColor: '#f0fdf4', borderRadius: '6px', border: '1px solid #bbf7d0' }}>
                <h4 style={{ margin: '0 0 10px 0', color: '#16a34a' }}>‚úÖ –° useMemo</h4>
                <pre style={{ fontSize: '12px', margin: 0, whiteSpace: 'pre-wrap' }}>
                  {JSON.stringify(configWithMemo, null, 2)}
                </pre>
                <div style={{ fontSize: '12px', color: '#14532d', marginTop: '5px' }}>
                  –¢–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                </div>
              </div>
            </div>
          </div>
          <div className="code-block">
{`// ‚ùå –ë–ï–ó useMemo - –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä
const config = {
  theme: theme,
  itemCount: items.length,
  timestamp: Date.now() // ‚ùå –í—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!
};

// ‚úÖ –° useMemo - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
const config = useMemo(() => {
  return {
    theme: theme,
    itemCount: items.length,
    isLargeDataset: items.length > 500
  };
}, [theme, items.length]); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`}
          </div>
        </div>

        <div className="info-box blue">
          <h4 className="mt-0">‚ö° –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useMemo:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–î–æ—Ä–æ–≥–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:</strong> —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
            <li><strong>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</strong> –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
            <li><strong>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤:</strong> –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ props</li>
            <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</strong> –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
          </ul>
        </div>

        <div className="info-box green">
          <h4 className="mt-0">üîÑ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useCallback:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–§—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ props:</strong> –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</li>
            <li><strong>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:</strong> —Ñ—É–Ω–∫—Ü–∏–∏ –≤ useEffect</li>
            <li><strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–æ–≤:</strong> —Å React.memo</li>
            <li><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫:</strong> –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤</li>
          </ul>
        </div>

        <div className="info-box yellow">
          <h4 className="mt-0">‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ:</strong> –º–µ–º–æ–∏–∑–∞—Ü–∏—è —Ç–æ–∂–µ –∏–º–µ–µ—Ç —Å–≤–æ—é —Å—Ç–æ–∏–º–æ—Å—Ç—å</li>
            <li><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</strong> –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ</li>
            <li><strong>React.memo:</strong> useCallback —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ —Å –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏</li>
            <li><strong>–ò–∑–º–µ—Ä—è–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–π—Ç–µ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default UseMemoCallbackDemo