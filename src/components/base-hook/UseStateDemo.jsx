import {useState, useRef, useEffect} from 'react'

function UseStateDemo() {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');
  const [isVisible, setIsVisible] = useState(true);
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');

  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å useRef
  const [optimizedName, setOptimizedName] = useState('');
  const optimizedInputRef = useRef(null);

  // –°—á–µ—Ç—á–∏–∫ —Ä–µ–Ω–¥–µ—Ä–æ–≤
  const renderCount = useRef(0);
  const [lastUpdate, setLastUpdate] = useState('');
  const [stateHistory, setStateHistory] = useState([]);

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  renderCount.current += 1;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const logStateChange = (field, oldValue, newValue) => {
    const timestamp = new Date().toLocaleTimeString();
    const change = {
      timestamp,
      field,
      oldValue,
      newValue,
      renderNumber: renderCount.current
    };
    setStateHistory(prev => [change, ...prev].slice(0, 10)); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setLastUpdate(`${field} –∏–∑–º–µ–Ω–µ–Ω–æ –≤ ${timestamp}`);
  };

  const addTodo = () => {
    if (newTodo.trim()) {
      const oldTodos = [...todos];
      const newTodos = [...todos, {id: Date.now(), text: newTodo, completed: false}];
      logStateChange('todos', `${oldTodos.length} –∑–∞–¥–∞—á`, `${newTodos.length} –∑–∞–¥–∞—á`);
      setTodos(newTodos);
      setNewTodo('');
    }
  };

  const toggleTodo = (id) => {
    const newTodos = todos.map(todo =>
      todo.id === id ? {...todo, completed: !todo.completed} : todo
    );
    logStateChange('todos', '—Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω', '—Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    setTodos(newTodos);
  };

  const deleteTodo = (id) => {
    const oldTodos = [...todos];
    const newTodos = todos.filter(todo => todo.id !== id);
    logStateChange('todos', `${oldTodos.length} –∑–∞–¥–∞—á`, `${newTodos.length} –∑–∞–¥–∞—á`);
    setTodos(newTodos);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const handleCountChange = (newCount) => {
    logStateChange('count', count, newCount);
    setCount(newCount);
  };

  const handleNameChange = (newName) => {
    logStateChange('name', name, newName);
    setName(newName);
  };

  const handleVisibilityChange = () => {
    logStateChange('isVisible', isVisible, !isVisible);
    setIsVisible(!isVisible);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å useRef
  const handleOptimizedSubmit = () => {
    const inputValue = optimizedInputRef.current.value;
    logStateChange('optimizedName', optimizedName, inputValue);
    setOptimizedName(inputValue);
  };

  const clearOptimizedInput = () => {
    optimizedInputRef.current.value = '';
    logStateChange('optimizedName', optimizedName, '');
    setOptimizedName('');
  };

  return (
    <div>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 1000,
        backgroundColor: '#1f2937',
        color: '#10b981',
        padding: '8px 16px',
        fontSize: '12px',
        fontFamily: 'monospace',
        borderBottom: '2px solid #374151',
        boxShadow: '0 2px 8px rgba(0,0,0,0.3)'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', maxWidth: '1200px', margin: '0 auto' }}>
          <div style={{ display: 'flex', gap: '24px' }}>
            <span>count: <span style={{color: '#fbbf24'}}>{count}</span></span>
            <span>name: <span style={{color: '#fbbf24'}}>"{name}"</span></span>
            <span>isVisible: <span style={{color: '#fbbf24'}}>{isVisible.toString()}</span></span>
            <span>todos: <span style={{color: '#fbbf24'}}>[{todos.length}]</span></span>
            <span>optimizedName: <span style={{color: '#fbbf24'}}>"{optimizedName}"</span></span>
          </div>
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>
            <span>–†–µ–Ω–¥–µ—Ä–æ–≤: <span style={{color: '#ef4444'}}>{renderCount.current}</span></span>
            <span style={{ fontSize: '10px', color: '#9ca3af' }}>{lastUpdate || '–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç'}</span>
          </div>
        </div>
      </div>

      {/* –û—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */}
      <div style={{ paddingTop: '50px' }}>
        <h2>üéØ useState Hook</h2>
        <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</p>

      <div className="code-block">
        {`const [state, setState] = useState(initialValue);`}
      </div>

      {/* –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ */}
      <div className="demo-container">
        <h3>1. –ü—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫</h3>
        <div className="interactive-demo">
          <div className="counter">{count}</div>
          <button className="btn" onClick={() => handleCountChange(count + 1)}>
            –£–≤–µ–ª–∏—á–∏—Ç—å
          </button>
          <button className="btn" onClick={() => handleCountChange(count - 1)}>
            –£–º–µ–Ω—å—à–∏—Ç—å
          </button>
          <button className="btn" onClick={() => handleCountChange(0)}>
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
        </div>
        <div className="code-block">
          {`const [count, setCount] = useState(0);

<button onClick={() => setCount(count + 1)}>
    –£–≤–µ–ª–∏—á–∏—Ç—å
</button>`}
        </div>
      </div>

      {/* –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º */}
      <div className="demo-container">
        <h3>2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º</h3>
        <div className="interactive-demo">
          <input
            className="input-demo"
            type="text"
            value={name}
            onChange={(e) => handleNameChange(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
          />
          <p>–ü—Ä–∏–≤–µ—Ç, <strong>{name || '–≥–æ—Å—Ç—å'}</strong>!</p>
        </div>
        <div className="code-block">
          {`const [name, setName] = useState('');

<input 
    value={name}
    onChange={(e) => setName(e.target.value)}
/>`}
        </div>
      </div>

      {/* –ü—Ä–∏–º–µ—Ä 3: –ë—É–ª–µ–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <div className="demo-container">
        <h3>3. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏</h3>
        <div className="interactive-demo">
          <button className="btn" onClick={handleVisibilityChange}>
            {isVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –±–ª–æ–∫
          </button>
          {isVisible && (
            <div className="bg-blue-100 border-2 border-blue-400 rounded-lg p-6 my-4">
              üéâ –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å!
            </div>
          )}
        </div>
        <div className="code-block">
          {`const [isVisible, setIsVisible] = useState(true);

{isVisible && <div>–ö–æ–Ω—Ç–µ–Ω—Ç</div>}`}
        </div>
      </div>

      {/* –ü—Ä–∏–º–µ—Ä 4: –°–ª–æ–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–º–∞—Å—Å–∏–≤) */}
      <div className="demo-container">
        <h3>4. –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–º–∞—Å—Å–∏–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)</h3>
        <div className="interactive-demo">
          <div className="flex gap-3 mb-4">
            <input
              className="input-demo"
              type="text"
              value={newTodo}
              onChange={(e) => setNewTodo(e.target.value)}
              placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
              onKeyPress={(e) => e.key === 'Enter' && addTodo()}
            />
            <button className="btn" onClick={addTodo}>
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>

          <div className="space-y-2">
            {todos.map(todo => (
              <div key={todo.id} className={`todo-item ${todo.completed ? 'completed' : ''}`}>
                <input
                  type="checkbox"
                  checked={todo.completed}
                  onChange={() => toggleTodo(todo.id)}
                  className="w-4 h-4"
                />
                <span className={`flex-1 ${todo.completed ? 'line-through text-gray-500' : ''}`}>
                                    {todo.text}
                                </span>
                <button
                  onClick={() => deleteTodo(todo.id)}
                  className="todo-delete-btn"
                >
                  ‚úï
                </button>
              </div>
            ))}
          </div>

          {todos.length === 0 && (
            <p className="text-gray-500 italic text-center py-4">
              –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç
            </p>
          )}
        </div>
        <div className="code-block">
          {`const [todos, setTodos] = useState([]);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
setTodos([...todos, newTodo]);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
setTodos(todos.map(todo => 
    todo.id === id ? {...todo, completed: !todo.completed} : todo
));

// –£–¥–∞–ª–µ–Ω–∏–µ  
setTodos(todos.filter(todo => todo.id !== id));`}
        </div>
      </div>

      {/* –ü—Ä–∏–º–µ—Ä 5: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å useRef */}
      <div className="demo-container">
        <h3>5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–æ–≤ —Å useRef</h3>
        <div className="interactive-demo">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –∏–Ω–ø—É—Ç (–º–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤) */}
            <div className="bg-red-50 border-2 border-red-200 rounded-lg p-4">
              <h4 className="text-red-700 mb-3">‚ùå –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –∏–Ω–ø—É—Ç (–º–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤)</h4>
              <input
                className="input-demo w-full mb-2"
                type="text"
                value={name}
                onChange={(e) => handleNameChange(e.target.value)}
                placeholder="–ö–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª = —Ä–µ–Ω–¥–µ—Ä"
              />
              <p className="text-sm text-red-600">
                –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <strong>{name}</strong>
              </p>
              <p className="text-xs text-red-500">
                üí° –ö–∞–∂–¥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä!
              </p>
            </div>

            {/* –ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –∏–Ω–ø—É—Ç —Å useRef (–º–µ–Ω—å—à–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤) */}
            <div className="bg-green-50 border-2 border-green-200 rounded-lg p-4">
              <h4 className="text-green-700 mb-3">‚úÖ useRef –∏–Ω–ø—É—Ç (–º–µ–Ω—å—à–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤)</h4>
              <input
                ref={optimizedInputRef}
                className="input-demo w-full mb-2"
                type="text"
                placeholder="–†–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"
              />
              <div className="flex gap-2 mb-2">
                <button className="btn text-sm" onClick={handleOptimizedSubmit}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
                <button className="btn text-sm" onClick={clearOptimizedInput}>
                  –û—á–∏—Å—Ç–∏—Ç—å
                </button>
              </div>
              <p className="text-sm text-green-600">
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <strong>{optimizedName}</strong>
              </p>
              <p className="text-xs text-green-500">
                üí° –†–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏!
              </p>
            </div>
          </div>
        </div>
        <div className="code-block">
          {`// –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –∏–Ω–ø—É—Ç - –º–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤
const [name, setName] = useState('');
<input 
    value={name}
    onChange={(e) => setName(e.target.value)} // –†–µ–Ω–¥–µ—Ä –Ω–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
/>

// useRef –∏–Ω–ø—É—Ç - –º–µ–Ω—å—à–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤
const inputRef = useRef(null);
const [savedValue, setSavedValue] = useState('');

const handleSubmit = () => {
    setSavedValue(inputRef.current.value); // –†–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
};

<input ref={inputRef} />
<button onClick={handleSubmit}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>`}
        </div>
        <div className="info-box blue">
          <h4 className="mt-0">‚ö° –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useRef –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ —Ñ–æ—Ä–º—ã:</strong> –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ</li>
            <li><strong>–ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π:</strong> –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–≤–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å debounce</li>
            <li><strong>–§–æ–∫—É—Å –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ:</strong> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é</li>
            <li><strong>–ò–∑–º–µ—Ä–µ–Ω–∏—è:</strong> –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞</li>
          </ul>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="demo-container">
        <h3>üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</h3>
        <div className="bg-gray-800 text-green-400 p-4 rounded-lg font-mono text-sm">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="text-cyan-300 mb-2">üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</h4>
              <div className="space-y-1">
                <div>count: <span className="text-yellow-300">{count}</span></div>
                <div>name: <span className="text-yellow-300">"{name}"</span></div>
                <div>isVisible: <span className="text-yellow-300">{isVisible.toString()}</span></div>
                <div>todos: <span className="text-yellow-300">[{todos.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤]</span></div>
                <div>newTodo: <span className="text-yellow-300">"{newTodo}"</span></div>
                <div>optimizedName: <span className="text-yellow-300">"{optimizedName}"</span></div>
              </div>
            </div>
            <div>
              <h4 className="text-cyan-300 mb-2">üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–æ–≤:</h4>
              <div className="space-y-1">
                <div>–í—Å–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–æ–≤: <span className="text-red-300">{renderCount.current}</span></div>
                <div>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</div>
                <div className="text-xs text-gray-400">{lastUpdate || '–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç'}</div>
              </div>
            </div>
          </div>

          {stateHistory.length > 0 && (
            <div className="mt-4">
              <h4 className="text-cyan-300 mb-2">üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):</h4>
              <div className="space-y-1 max-h-32 overflow-y-auto">
                {stateHistory.slice(0, 5).map((change, index) => (
                  <div key={index} className="text-xs border-l-2 border-blue-500 pl-2">
                    <span className="text-gray-400">{change.timestamp}</span> -
                    <span className="text-white"> {change.field}</span>:
                    <span className="text-red-300"> {change.oldValue}</span> ‚Üí
                    <span className="text-green-300"> {change.newValue}</span>
                    <span className="text-gray-500"> (—Ä–µ–Ω–¥–µ—Ä #{change.renderNumber})</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-800 mb-2">
            <strong>–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong>
          </p>
          <ul className="text-xs text-blue-700 space-y-1">
            <li>‚Ä¢ <strong>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</strong> - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö state –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</li>
            <li>‚Ä¢ <strong>–°—á–µ—Ç—á–∏–∫ —Ä–µ–Ω–¥–µ—Ä–æ–≤</strong> - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–ª—Å—è</li>
            <li>‚Ä¢ <strong>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</strong> - –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—è–ª–∏—Å—å –∏ –∫–æ–≥–¥–∞</li>
            <li>‚Ä¢ <strong>–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</strong> - –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</li>
          </ul>
        </div>
      </div>

        <div className="info-box yellow">
          <h4 className="mt-0">üí° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã useState:</h4>
          <ul className="text-sm space-y-1">
            <li><strong>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</strong> useState(initialValue) - –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ</li>
            <li><strong>–í–æ–∑–≤—Ä–∞—Ç:</strong> [—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è]</li>
            <li><strong>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> setState(newValue) –∏–ª–∏ setState(prev =&gt; newValue)</li>
            <li><strong>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å:</strong> setState –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ</li>
            <li><strong>–ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä:</strong> –∫–∞–∂–¥—ã–π setState –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default UseStateDemo
