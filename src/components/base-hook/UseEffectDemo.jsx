import { useState, useEffect, useRef } from 'react'

function UseEffectDemo() {
    const [count, setCount] = useState(0);
    const [windowWidth, setWindowWidth] = useState(window.innerWidth);
    const [isOnline, setIsOnline] = useState(navigator.onLine);
    const [timer, setTimer] = useState(0);
    const [isTimerRunning, setIsTimerRunning] = useState(false);
    const [posts, setPosts] = useState([]);
    const [loading, setLoading] = useState(false);
    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

    // –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const [effectLog, setEffectLog] = useState([]);
    const effectCounters = useRef({
        everyRender: 0,
        onMount: 0,
        onCountChange: 0,
        onEvents: 0,
        onTimer: 0,
        onMouse: 0
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    const logEffect = (effectName, description, type = 'info') => {
        const timestamp = new Date().toLocaleTimeString();
        effectCounters.current[effectName] = (effectCounters.current[effectName] || 0) + 1;

        const logEntry = {
            id: Date.now() + Math.random(),
            timestamp,
            effectName,
            description,
            type,
            count: effectCounters.current[effectName]
        };

        setEffectLog(prev => [logEntry, ...prev].slice(0, 15)); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π
    };

    // –ü—Ä–∏–º–µ—Ä 1: –≠—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä)
    // useEffect(() => {
    //     logEffect('everyRender', '–≠—Ñ—Ñ–µ–∫—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä', 'warning');
    //     console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è!');
    // });

    // –ü—Ä–∏–º–µ—Ä 2: –≠—Ñ—Ñ–µ–∫—Ç —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
    useEffect(() => {
        logEffect('onMount', '–≠—Ñ—Ñ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è', 'success');
        console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!');
        document.title = `useEffect Demo - –°—á–µ—Ç—á–∏–∫: ${count}`;

        return () => {
            logEffect('onMount', '–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', 'error');
            console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è!');
            document.title = 'React 19 Hooks Presentation';
        };
    }, []);

    // –ü—Ä–∏–º–µ—Ä 3: –≠—Ñ—Ñ–µ–∫—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count)
    useEffect(() => {
        logEffect('onCountChange', `–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count: ${count}`, 'info');
        document.title = `–°—á–µ—Ç—á–∏–∫: ${count}`;
    }, [count]);

    // –ü—Ä–∏–º–µ—Ä 4: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è (—Å –æ—á–∏—Å—Ç–∫–æ–π)
    useEffect(() => {
        logEffect('onEvents', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞ (resize, online/offline)', 'success');

        const handleResize = () => {
            setWindowWidth(window.innerWidth);
        };

        const handleOnline = () => setIsOnline(true);
        const handleOffline = () => setIsOnline(false);

        window.addEventListener('resize', handleResize);
        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);

        return () => {
            logEffect('onEvents', '–û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è', 'warning');
            window.removeEventListener('resize', handleResize);
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
        };
    }, []);

    // –ü—Ä–∏–º–µ—Ä 5: –¢–∞–π–º–µ—Ä —Å –æ—á–∏—Å—Ç–∫–æ–π
    useEffect(() => {
        let interval;

        if (isTimerRunning) {
            logEffect('onTimer', '–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ interval', 'info');
            interval = setInterval(() => {
                setTimer(prev => prev + 1);
            }, 1000);
        } else {
            logEffect('onTimer', '–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
        }

        return () => {
            if (interval) {
                logEffect('onTimer', '–û—á–∏—Å—Ç–∫–∞ interval —Ç–∞–π–º–µ—Ä–∞', 'error');
                clearInterval(interval);
            }
        };
    }, [isTimerRunning]);

    // –ü—Ä–∏–º–µ—Ä 6: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏
    useEffect(() => {
        logEffect('onMouse', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏', 'success');

        const handleMouseMove = (e) => {
            setMousePosition({ x: e.clientX, y: e.clientY });
        };

        document.addEventListener('mousemove', handleMouseMove);

        return () => {
            logEffect('onMouse', '–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏', 'warning');
            document.removeEventListener('mousemove', handleMouseMove);
        };
    }, []);

    // –ü—Ä–∏–º–µ—Ä 7: –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
    const fetchPosts = async () => {
        logEffect('onAPI', '–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API', 'info');
        setLoading(true);
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
            await new Promise(resolve => setTimeout(resolve, 1500));
            const mockPosts = [
                { id: 1, title: '–ò–∑—É—á–∞–µ–º useEffect', content: 'useEffect –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã' },
                { id: 2, title: '–û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤', content: '–í–∞–∂–Ω–æ –æ—á–∏—â–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç–∞–π–º–µ—Ä—ã' },
                { id: 3, title: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤', content: '–ú–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' }
            ];
            setPosts(mockPosts);
            logEffect('onAPI', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        } catch (error) {
            logEffect('onAPI', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        } finally {
            setLoading(false);
        }
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    const getTypeColor = (type) => {
        const colors = {
            info: '#3b82f6',
            success: '#10b981',
            warning: '#f59e0b',
            error: '#ef4444'
        };
        return colors[type] || '#6b7280';
    };

    return (
        <div>
            {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */}
            <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                right: 0,
                zIndex: 1000,
                backgroundColor: '#111827',
                color: '#f3f4f6',
                padding: '8px 16px',
                fontSize: '11px',
                fontFamily: 'monospace',
                borderBottom: '2px solid #374151',
                boxShadow: '0 2px 8px rgba(0,0,0,0.3)',
                maxHeight: '120px',
                overflow: 'hidden'
            }}>
                <div style={{ display: 'flex', gap: '24px', maxWidth: '1400px', margin: '0 auto' }}>
                    {/* –°—á–µ—Ç—á–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */}
                    <div style={{ minWidth: '300px' }}>
                        <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
                            üîç –°—á–µ—Ç—á–∏–∫–∏ useEffect:
                        </div>
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '8px', fontSize: '10px' }}>
                            <span>–ö–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä: <span style={{color: '#f59e0b'}}>{effectCounters.current.everyRender}</span></span>
                            <span>–ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: <span style={{color: '#10b981'}}>{effectCounters.current.onMount}</span></span>
                            <span>–ü—Ä–∏ count: <span style={{color: '#3b82f6'}}>{effectCounters.current.onCountChange}</span></span>
                            <span>–°–æ–±—ã—Ç–∏—è: <span style={{color: '#10b981'}}>{effectCounters.current.onEvents}</span></span>
                            <span>–¢–∞–π–º–µ—Ä: <span style={{color: '#f59e0b'}}>{effectCounters.current.onTimer}</span></span>
                            <span>–ú—ã—à—å: <span style={{color: '#10b981'}}>{effectCounters.current.onMouse}</span></span>
                        </div>
                    </div>

                    {/* –õ–æ–≥ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */}
                    <div style={{ flex: 1, minWidth: '400px' }}>
                        <div style={{ fontWeight: 'bold', marginBottom: '4px', color: '#fbbf24' }}>
                            üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:
                        </div>
                        <div style={{
                            display: 'flex',
                            flexDirection: 'column',
                            gap: '2px',
                            maxHeight: '80px',
                            overflowY: 'auto'
                        }}>
                            {effectLog.slice(0, 4).map(log => (
                                <div key={log.id} style={{
                                    display: 'flex',
                                    alignItems: 'center',
                                    gap: '8px',
                                    fontSize: '10px',
                                    padding: '2px 4px',
                                    borderRadius: '3px',
                                    backgroundColor: 'rgba(75, 85, 99, 0.3)'
                                }}>
                                    <span style={{ color: '#9ca3af' }}>{log.timestamp}</span>
                                    <span style={{
                                        color: getTypeColor(log.type),
                                        fontWeight: 'bold',
                                        minWidth: '80px'
                                    }}>
                                        {log.effectName}
                                    </span>
                                    <span style={{ color: '#d1d5db', flex: 1 }}>
                                        {log.description}
                                    </span>
                                    <span style={{
                                        color: '#6b7280',
                                        fontSize: '9px',
                                        minWidth: '30px',
                                        textAlign: 'right'
                                    }}>
                                        #{log.count}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            {/* –û—Ç—Å—Ç—É–ø –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */}
            <div style={{ paddingTop: '130px' }}>
                <h2>‚ö° useEffect Hook</h2>
                <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (API –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–¥–ø–∏—Å–∫–∏, –æ—á–∏—Å—Ç–∫–∞)</p>

            <div className="code-block">
{`useEffect(() => {
    // –ü–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    return () => {
        // –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    };
}, [dependencies]); // –ú–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π`}
            </div>

            {/* –ü—Ä–∏–º–µ—Ä 1: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            <div className="demo-container">
                <h3>1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞</h3>
                <div className="interactive-demo">
                    <div className="counter">{count}</div>
                    <button className="btn" onClick={() => setCount(count + 1)}>
                        –£–≤–µ–ª–∏—á–∏—Ç—å
                    </button>
                    <button className="btn" onClick={() => setCount(0)}>
                        –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                    <p>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞!</p>
                </div>
                <div className="code-block">
{`useEffect(() => {
    document.title = \`–°—á–µ—Ç—á–∏–∫: \${count}\`;
}, [count]); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ count`}
                </div>
            </div>

            {/* –ü—Ä–∏–º–µ—Ä 2: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è */}
            <div className="demo-container">
                <h3>2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞</h3>
                <div className="interactive-demo">
                    <div className={`status ${isOnline ? 'online' : 'offline'}`}>
                        –°—Ç–∞—Ç—É—Å: {isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω'}
                    </div>
                    <p>–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞: <strong>{windowWidth}px</strong></p>
                    <p>–ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏: <strong>x: {mousePosition.x}, y: {mousePosition.y}</strong></p>
                    <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–µ—Ç—å</small>
                </div>
                <div className="code-block">
{`useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);
    const handleOnline = () => setIsOnline(true);
    
    window.addEventListener('resize', handleResize);
    window.addEventListener('online', handleOnline);
    
    return () => {
        window.removeEventListener('resize', handleResize);
        window.removeEventListener('online', handleOnline);
    };
}, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏`}
                </div>
            </div>

            {/* –ü—Ä–∏–º–µ—Ä 3: –¢–∞–π–º–µ—Ä */}
            <div className="demo-container">
                <h3>3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º</h3>
                <div className="interactive-demo">
                    <div className="counter">{formatTime(timer)}</div>
                    <button
                        className="btn"
                        onClick={() => setIsTimerRunning(!isTimerRunning)}
                    >
                        {isTimerRunning ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                    </button>
                    <button
                        className="btn"
                        onClick={() => {
                            setTimer(0);
                            setIsTimerRunning(false);
                        }}
                    >
                        –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                </div>
                <div className="code-block">
{`useEffect(() => {
    let interval;
    
    if (isTimerRunning) {
        interval = setInterval(() => {
            setTimer(prev => prev + 1);
        }, 1000);
    }

    return () => {
        if (interval) clearInterval(interval);
    };
}, [isTimerRunning]); // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç isTimerRunning`}
                </div>
            </div>

            {/* –ü—Ä–∏–º–µ—Ä 4: API –∑–∞–ø—Ä–æ—Å—ã */}
            <div className="demo-container">
                <h3>4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è API)</h3>
                <div className="interactive-demo">
                    <button
                        className="btn"
                        onClick={fetchPosts}
                        disabled={loading}
                    >
                        {loading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã'}
                    </button>

                    {loading && (
                        <div style={{ padding: '20px', textAlign: 'center' }}>
                            <div style={{
                                border: '4px solid #f3f3f3',
                                borderTop: '4px solid #61dafb',
                                borderRadius: '50%',
                                width: '40px',
                                height: '40px',
                                animation: 'spin 2s linear infinite',
                                margin: '0 auto'
                            }}></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                        </div>
                    )}

                    {posts.length > 0 && !loading && (
                        <div style={{ marginTop: '15px' }}>
                            {posts.map(post => (
                                <div key={post.id} style={{
                                    border: '1px solid #ddd',
                                    borderRadius: '8px',
                                    padding: '15px',
                                    marginBottom: '10px',
                                    background: '#f9f9f9'
                                }}>
                                    <h4 style={{ margin: '0 0 8px 0', color: '#333' }}>
                                        {post.title}
                                    </h4>
                                    <p style={{ margin: 0, color: '#666' }}>
                                        {post.content}
                                    </p>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
                <div className="code-block">
{`const fetchPosts = async () => {
    setLoading(true);
    try {
        const response = await fetch('/api/posts');
        const data = await response.json();
        setPosts(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
        setLoading(false);
    }
};`}
                </div>
            </div>

            <div style={{
                background: '#e8f4fd',
                border: '1px solid #b3d9ff',
                borderRadius: '8px',
                padding: '15px',
                marginTop: '20px'
            }}>
                <h4>üí° –¢–∏–ø—ã useEffect –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º:</h4>
                <ul>
                    <li><code>useEffect(() =&gt; {})</code> - –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä</li>
                    <li><code>useEffect(() =&gt; {}, [])</code> - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</li>
                    <li><code>useEffect(() =&gt; {}, [dep])</code> - –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ dep</li>
                    <li><strong>–û—á–∏—Å—Ç–∫–∞:</strong> return —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏–ª–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</li>
                </ul>
            </div>

            <div style={{
                background: '#fff3cd',
                border: '1px solid #ffeaa7',
                borderRadius: '8px',
                padding: '15px',
                marginTop: '15px'
            }}>
                <h4>‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:</h4>
                <ul>
                    <li><strong>–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª:</strong> –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
                    <li><strong>–£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏:</strong> –Ω–µ –æ—á–∏—Å—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏/—Ç–∞–π–º–µ—Ä—ã</li>
                    <li><strong>–õ–∏—à–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä—ã:</strong> –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏</li>
                    <li><strong>–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è:</strong> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                </ul>
            </div>

            <style>
{`@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}`}
            </style>
            </div>
        </div>
    );
}

export default UseEffectDemo
