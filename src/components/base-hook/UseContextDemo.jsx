import { useState, useContext, createContext } from 'react'

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
const ThemeContext = createContext();
const UserContext = createContext();
const SettingsContext = createContext();

// Theme Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function ThemeProvider({ children }) {
    const [theme, setTheme] = useState('light');

    const toggleTheme = () => {
        setTheme(prev => prev === 'light' ? 'dark' : 'light');
    };

    const value = {
        theme,
        toggleTheme,
        colors: {
            light: {
                bg: '#ffffff',
                text: '#333333',
                border: '#e9ecef'
            },
            dark: {
                bg: '#2d3748',
                text: '#e2e8f0',
                border: '#4a5568'
            }
        }
    };

    return (
        <ThemeContext.Provider value={value}>
            {children}
        </ThemeContext.Provider>
    );
}

// User Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function UserProvider({ children }) {
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(false);

    const login = async (username) => {
        setIsLoading(true);
        // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 1000));
        setUser({
            id: Date.now(),
            username,
            email: `${username}@example.com`,
            role: 'user'
        });
        setIsLoading(false);
    };

    const logout = () => {
        setUser(null);
    };

    const value = {
        user,
        isLoading,
        login,
        logout,
        isAuthenticated: !!user
    };

    return (
        <UserContext.Provider value={value}>
            {children}
        </UserContext.Provider>
    );
}

// Settings Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function SettingsProvider({ children }) {
    const [settings, setSettings] = useState({
        language: 'ru',
        notifications: true,
        autoSave: false,
        fontSize: 'medium'
    });

    const updateSetting = (key, value) => {
        setSettings(prev => ({
            ...prev,
            [key]: value
        }));
    };

    const resetSettings = () => {
        setSettings({
            language: 'ru',
            notifications: true,
            autoSave: false,
            fontSize: 'medium'
        });
    };

    const value = {
        settings,
        updateSetting,
        resetSettings
    };

    return (
        <SettingsContext.Provider value={value}>
            {children}
        </SettingsContext.Provider>
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã
function Header() {
    const { theme, toggleTheme, colors } = useContext(ThemeContext);
    const { user, logout } = useContext(UserContext);

    return (
        <div style={{
            background: colors[theme].bg,
            color: colors[theme].text,
            border: `2px solid ${colors[theme].border}`,
            borderRadius: '8px',
            padding: '15px',
            marginBottom: '15px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
        }}>
            <div>
                <h3 style={{ margin: 0 }}>
                    {user ? `–ü—Ä–∏–≤–µ—Ç, ${user.username}!` : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'}
                </h3>
                {user && (
                    <small style={{ opacity: 0.7 }}>
                        {user.email} ‚Ä¢ {user.role}
                    </small>
                )}
            </div>
            <div>
                <button className="btn" onClick={toggleTheme}>
                    {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
                    {theme === 'light' ? '–¢–µ–º–Ω–∞—è' : '–°–≤–µ—Ç–ª–∞—è'} —Ç–µ–º–∞
                </button>
                {user && (
                    <button className="btn" onClick={logout} style={{ marginLeft: '10px' }}>
                        –í—ã–π—Ç–∏
                    </button>
                )}
            </div>
        </div>
    );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function LoginForm() {
    const [username, setUsername] = useState('');
    const { login, isLoading } = useContext(UserContext);
    const { theme, colors } = useContext(ThemeContext);

    const handleSubmit = (e) => {
        e.preventDefault();
        if (username.trim()) {
            login(username.trim());
            setUsername('');
        }
    };

    return (
        <div className="theme-demo" style={{
            background: colors[theme].bg,
            color: colors[theme].text,
            border: `2px solid ${colors[theme].border}`
        }}>
            <h4>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h4>
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    className="input-demo"
                    disabled={isLoading}
                    style={{
                        background: colors[theme].bg,
                        color: colors[theme].text,
                        border: `1px solid ${colors[theme].border}`
                    }}
                />
                <button
                    type="submit"
                    className="btn"
                    disabled={isLoading || !username.trim()}
                >
                    {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
                </button>
            </form>
        </div>
    );
}

function UseContextDemo() {
    const [showAdvanced, setShowAdvanced] = useState(false);

    return (
        <div>
            <h2>üîÑ useContext Hook</h2>
            <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ React Context –±–µ–∑ prop drilling</p>

            <div className="code-block">
{`const MyContext = createContext();

// Provider
<MyContext.Provider value={data}>
    <App />
</MyContext.Provider>

// Consumer
const data = useContext(MyContext);`}
            </div>

            {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è */}
            <div className="demo-container">
                <h3>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è</h3>
                <div className="interactive-demo">
                    <ThemeProvider>
                        <UserProvider>
                            <SettingsProvider>
                                <Header />

                                <UserContext.Consumer>
                                    {({ user }) => (
                                        !user ? <LoginForm /> : (
                                            <div>
                                                <div style={{
                                                    display: 'grid',
                                                    gridTemplateColumns: '1fr',
                                                    gap: '15px',
                                                    marginBottom: '15px'
                                                }}>
                                                    <div style={{
                                                        padding: '20px',
                                                        borderRadius: '8px',
                                                        background: '#f0f8ff',
                                                        border: '1px solid #b3d9ff'
                                                    }}>
                                                        <h4>üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</h4>
                                                        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
                                                    </div>
                                                </div>
                                            </div>
                                        )
                                    )}
                                </UserContext.Consumer>
                            </SettingsProvider>
                        </UserProvider>
                    </ThemeProvider>
                </div>
            </div>

            <div style={{
                background: '#e8f4fd',
                border: '1px solid #b3d9ff',
                borderRadius: '8px',
                padding: '15px',
                marginTop: '20px'
            }}>
                <h4>üí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ useContext:</h4>
                <ul>
                    <li><strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</li>
                    <li><strong>–ë–ª–∏–∂–∞–π—à–∏–π Provider:</strong> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ Provider</li>
                    <li><strong>–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</strong> –∏–∑ createContext –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç Provider</li>
                    <li><strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> –≤—Å–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏</li>
                </ul>
            </div>
        </div>
    );
}

export default UseContextDemo
