import { useState } from 'react'

// –°–ª–∞–π–¥ 12: useId - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
function Slide12UseId() {
  const [activeStep, setActiveStep] = useState(0)

  const steps = [
    {
      title: 'üÜî –ß—Ç–æ —Ç–∞–∫–æ–µ useId?',
      description: '–•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö ID',
      content: `**useId** - —ç—Ç–æ —Ö—É–∫ –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ID –¥–ª—è accessibility –∞—Ç—Ä–∏–±—É—Ç–æ–≤.

**–ó–∞—á–µ–º –Ω—É–∂–µ–Ω:**
‚Ä¢ –°–≤—è–∑–∞—Ç—å label —Å input —á–µ—Ä–µ–∑ htmlFor
‚Ä¢ –°–æ–∑–¥–∞—Ç—å ARIA –∞—Ç—Ä–∏–±—É—Ç—ã (aria-labelledby, aria-describedby)
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ (SSR)

**–ö–∞–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è ID:**
‚Ä¢ React –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ
‚Ä¢ –§–æ—Ä–º–∞—Ç: ":r1:", ":r2:", ":r3:" –∏ —Ç.–¥.
‚Ä¢ –ü—Ä–∏ SSR: ":R1:", ":R2:" (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π R)
‚Ä¢ –û–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

**–í–∞–∂–Ω–æ:**
useId –ù–ï –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,
      code: `import { useId } from 'react'

function FormField({ label, type = 'text' }) {
  // React —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  const id = useId()

  console.log(id) // ":r1:"

  return (
    <div>
      <label htmlFor={id}>
        {label}
      </label>
      <input id={id} type={type} />
    </div>
  )
}

function MyForm() {
  return (
    <form>
      <FormField label="–ò–º—è" />
      {/* id –±—É–¥–µ—Ç ":r1:" */}

      <FormField label="Email" type="email" />
      {/* id –±—É–¥–µ—Ç ":r2:" */}

      <FormField label="–ü–∞—Ä–æ–ª—å" type="password" />
      {/* id –±—É–¥–µ—Ç ":r3:" */}
    </form>
  )
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ HTML:
// <label for=":r1:">–ò–º—è</label>
// <input id=":r1:" type="text" />
//
// <label for=":r2:">Email</label>
// <input id=":r2:" type="email" />
//
// <label for=":r3:">–ü–∞—Ä–æ–ª—å</label>
// <input id=":r3:" type="password" />`
    },
    {
      title: 'üéØ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω useId?',
      description: '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä—É—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π ID',
      content: `**–ü—Ä–æ–±–ª–µ–º–∞ –ë–ï–ó useId:**

–†–∞–Ω—å—à–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ ID –≤—Ä—É—á–Ω—É—é:
‚Ä¢ –°—á—ë—Ç—á–∏–∫: let counter = 0
‚Ä¢ Math.random(): id-\${Math.random()}
‚Ä¢ Date.now(): id-\${Date.now()}

**–ß—Ç–æ –º–æ–≥–ª–æ –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫:**

1. **SSR –ø—Ä–æ–±–ª–µ–º–∞** - ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ —Ä–∞–∑–Ω—ã–µ
2. **–ö–æ–ª–ª–∏–∑–∏–∏** - –¥–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ID
3. **–£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥** - –ø–æ—Ä—è–¥–æ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è

**useId —Ä–µ—à–∞–µ—Ç –≤—Å–µ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã:**
‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã–π ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–∏ —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–∞—Ö`,
      code: `// ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
let counter = 0

function FormField({ label }) {
  const id = \`field-\${counter++}\`

  return (
    <div>
      <label htmlFor={id}>{label}</label>
      <input id={id} />
    </div>
  )
}

// Server —Ä–µ–Ω–¥–µ—Ä:
// <FormField label="Name" /> ‚Üí id = "field-0"
// <FormField label="Email" /> ‚Üí id = "field-1"

// Client —Ä–µ–Ω–¥–µ—Ä (–µ—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è):
// {showExtra && <FormField label="Extra" />} ‚Üí id = "field-0"
// <FormField label="Name" /> ‚Üí id = "field-1" ‚ùå
// <FormField label="Email" /> ‚Üí id = "field-2" ‚ùå

// Hydration mismatch! ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!

// ‚úÖ –†–ï–®–ï–ù–ò–ï: useId
function FormField({ label }) {
  const id = useId() // React –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

  return (
    <div>
      <label htmlFor={id}>{label}</label>
      <input id={id} />
    </div>
  )
}

// Server: ":R1:", ":R2:"
// Client: ":R1:", ":R2:"
// –í—Å–µ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! ‚úÖ`
    },
    {
      title: '‚ôø ARIA –∞—Ç—Ä–∏–±—É—Ç—ã',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è accessibility',
      content: `**useId –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤:**

ARIA (Accessible Rich Internet Applications) –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

**–û—Å–Ω–æ–≤–Ω—ã–µ ARIA –∞—Ç—Ä–∏–±—É—Ç—ã:**
‚Ä¢ aria-labelledby - ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π
‚Ä¢ aria-describedby - ID —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ aria-controls - ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π
‚Ä¢ aria-expanded - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç

**–ü—Ä–∏–º–µ—Ä: –ö–æ–º–±–æ–±–æ–∫—Å (select —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º)**`,
      code: `function ComboBox({ label, options }) {
  const [isOpen, setIsOpen] = useState(false)
  const [value, setValue] = useState('')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Å–≤—è–∑–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const comboboxId = useId()
  const listboxId = useId()
  const labelId = useId()

  return (
    <div>
      {/* Label –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤ */}
      <label id={labelId}>{label}</label>

      {/* Input —Å ARIA –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ */}
      <input
        id={comboboxId}
        role="combobox"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onFocus={() => setIsOpen(true)}
        onBlur={() => setIsOpen(false)}
        aria-expanded={isOpen}          // –†–∞—Å–∫—Ä—ã—Ç –ª–∏ —Å–ø–∏—Å–æ–∫
        aria-controls={listboxId}       // –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–æ–º
        aria-labelledby={labelId}       // –û–ø–∏—Å–∞–Ω label'–æ–º
      />

      {/* –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π */}
      {isOpen && (
        <ul
          id={listboxId}
          role="listbox"
          aria-labelledby={labelId}
        >
          {options
            .filter(opt => opt.includes(value))
            .map(option => (
              <li key={option} role="option">
                {option}
              </li>
            ))
          }
        </ul>
      )}
    </div>
  )
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ HTML:
// <label id=":r1:">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</label>
// <input
//   id=":r2:"
//   aria-controls=":r3:"
//   aria-labelledby=":r1:"
//   aria-expanded="true"
// />
// <ul id=":r3:" aria-labelledby=":r1:">
//   <li>–ú–æ—Å–∫–≤–∞</li>
//   <li>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</li>
// </ul>

// –°–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä —Ç–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏! ‚úÖ`
    },
    {
      title: 'üìù –§–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π',
      description: '–î–æ—Å—Ç—É–ø–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö',
      content: `**–ü—Ä–∏–º–µ—Ä: –§–æ—Ä–º–∞ —Å aria-describedby –¥–ª—è –æ—à–∏–±–æ–∫**

–ö–æ–≥–¥–∞ —É –ø–æ–ª—è –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –æ–∑–≤—É—á–∏—Ç—å –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –ø–æ–ª—è
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
3. –°–≤—è–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ aria-describedby
4. –î–æ–±–∞–≤–ª—è–µ–º aria-invalid –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏`,
      code: `function AccessibleForm() {
  const nameId = useId()
  const emailId = useId()
  const errorId = useId()

  const [errors, setErrors] = useState({})

  const validate = (e) => {
    e.preventDefault()
    const formData = new FormData(e.target)
    const newErrors = {}

    if (!formData.get('name')) {
      newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }
    if (!formData.get('email')) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }

    setErrors(newErrors)
  }

  return (
    <form onSubmit={validate}>
      {/* –ü–æ–ª–µ –∏–º–µ–Ω–∏ */}
      <div>
        <label htmlFor={nameId}>–ò–º—è *</label>
        <input
          id={nameId}
          name="name"
          aria-required="true"
          aria-invalid={!!errors.name}
          aria-describedby={errors.name ? \`\${errorId}-name\` : undefined}
        />
        {errors.name && (
          <div
            id={\`\${errorId}-name\`}
            role="alert"
            style={{ color: 'red' }}
          >
            ‚ö†Ô∏è {errors.name}
          </div>
        )}
      </div>

      {/* –ü–æ–ª–µ email */}
      <div>
        <label htmlFor={emailId}>Email *</label>
        <input
          id={emailId}
          name="email"
          type="email"
          aria-required="true"
          aria-invalid={!!errors.email}
          aria-describedby={errors.email ? \`\${errorId}-email\` : undefined}
        />
        {errors.email && (
          <div
            id={\`\${errorId}-email\`}
            role="alert"
            style={{ color: 'red' }}
          >
            ‚ö†Ô∏è {errors.email}
          </div>
        )}
      </div>

      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
  )
}

// –ö–æ–≥–¥–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∞:
// <input
//   id=":r1:"
//   aria-invalid="true"
//   aria-describedby=":r3:-name"
// />
// <div id=":r3:-name" role="alert">
//   ‚ö†Ô∏è –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// </div>

// –°–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä –æ–∑–≤—É—á–∏—Ç: "–ò–º—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –æ—à–∏–±–∫–∞: –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" ‚úÖ`
    },
    {
      title: 'üî¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ ID',
      description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      content: `**–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö ID:**

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π ID –∏ –¥–æ–±–∞–≤–ª—è–µ—à—å –∫ –Ω–µ–º—É —Å—É—Ñ—Ñ–∏–∫—Å—ã.

**–ü—Ä–∞–≤–∏–ª–æ:**
‚Ä¢ –û–¥–∏–Ω –≤—ã–∑–æ–≤ useId() = –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π ID
‚Ä¢ –î–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π –¥–æ–±–∞–≤–ª—è–π —Å—É—Ñ—Ñ–∏–∫—Å—ã: \${baseId}-suffix

**–ü—Ä–∏–º–µ—Ä: –ì—Ä—É–ø–ø–∞ —á–µ–∫–±–æ–∫—Å–æ–≤**`,
      code: `function CheckboxGroup({ title, items }) {
  const baseId = useId()
  const titleId = useId()

  return (
    <fieldset>
      <legend id={titleId}>{title}</legend>

      {items.map((item, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –∫ –±–∞–∑–æ–≤–æ–º—É ID
        const checkboxId = \`\${baseId}-\${index}\`

        return (
          <div key={index}>
            <input
              id={checkboxId}
              type="checkbox"
              name={item.value}
              aria-labelledby={titleId}
            />
            <label htmlFor={checkboxId}>
              {item.label}
            </label>
          </div>
        )
      })}
    </fieldset>
  )
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
<CheckboxGroup
  title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏"
  items={[
    { label: 'React', value: 'react' },
    { label: 'TypeScript', value: 'ts' },
    { label: 'Node.js', value: 'node' }
  ]}
/>

// –†–µ–∑—É–ª—å—Ç–∞—Ç:
// <legend id=":r1:">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏</legend>
//
// <input id=":r2:-0" aria-labelledby=":r1:" />
// <label for=":r2:-0">React</label>
//
// <input id=":r2:-1" aria-labelledby=":r1:" />
// <label for=":r2:-1">TypeScript</label>
//
// <input id=":r2:-2" aria-labelledby=":r1:" />
// <label for=":r2:-2">Node.js</label>`
    },
    {
      title: '‚ùå –ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useId',
      description: '–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
      content: `**useId –ù–ï –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:**

1. **Key –≤ —Å–ø–∏—Å–∫–∞—Ö** ‚ùå
   ‚Ä¢ key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ useId –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π ID –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ —Å–ø–∏—Å–∫–∞

2. **CSS –∫–ª–∞—Å—Å—ã** ‚ùå
   ‚Ä¢ –§–æ—Ä–º–∞—Ç ID –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö React
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤

3. **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö** ‚ùå
   ‚Ä¢ useId —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
   ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏–ª–∏ localStorage

4. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π** ‚ùå
   ‚Ä¢ useId –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–π - –æ–Ω –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π crypto.randomUUID() –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö ID`,
      code: `// ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: key –≤ —Å–ø–∏—Å–∫–∞—Ö
function TodoList({ todos }) {
  const id = useId()

  return todos.map(todo => (
    <div key={id}> {/* ‚ùå –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π key! */}
      {todo.text}
    </div>
  ))
}

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö
function TodoList({ todos }) {
  return todos.map(todo => (
    <div key={todo.id}> {/* ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö */}
      {todo.text}
    </div>
  ))
}

// ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: CSS –∫–ª–∞—Å—Å—ã
function Component() {
  const id = useId()

  return (
    <div className={id}> {/* ‚ùå –§–æ—Ä–º–∞—Ç ":r1:" - –ø–ª–æ—Ö–æ–π –∫–ª–∞—Å—Å */}
      <style>{\`
        .\${id} { /* ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ":" –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ */}
          color: red;
        }
      \`}</style>
    </div>
  )
}

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
function Component() {
  return (
    <div className="my-component"> {/* ‚úÖ */}
      <style>{\`
        .my-component {
          color: red;
        }
      \`}</style>
    </div>
  )
}

// ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
function createUser() {
  const id = useId() // ‚ùå useId —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞!

  fetch('/api/users', {
    method: 'POST',
    body: JSON.stringify({ id }) // ‚ùå
  })
}

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function createUser() {
  fetch('/api/users', {
    method: 'POST',
    body: JSON.stringify({
      // ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä
    })
  })
}

// ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
function Component() {
  const randomId = useId() // ‚ùå –≠—Ç–æ –ù–ï —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!

  return <div data-random={randomId} />
}

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: crypto API
function Component() {
  const [randomId] = useState(() => crypto.randomUUID())

  return <div data-random={randomId} />
}`
    },
    {
      title: '‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      description: '–ö–æ–≥–¥–∞ –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å useId',
      content: `**–ò—Å–ø–æ–ª—å–∑—É–π useId –¥–ª—è:**

‚úÖ **Accessibility (–≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ):**
   ‚Ä¢ htmlFor —Å–≤—è–∑—å label + input
   ‚Ä¢ aria-labelledby, aria-describedby
   ‚Ä¢ aria-controls –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   ‚Ä¢ role –∞—Ç—Ä–∏–±—É—Ç—ã

‚úÖ **–§–æ—Ä–º—ã:**
   ‚Ä¢ –°–≤—è–∑—å –ø–æ–ª–µ–π —Å label
   ‚Ä¢ –°–≤—è–∑—å –æ—à–∏–±–æ–∫ —Å –ø–æ–ª—è–º–∏
   ‚Ä¢ –°–≤—è–∑—å –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –ø–æ–ª—è–º–∏

‚úÖ **–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
   ‚Ä¢ –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ (select, combobox)
   ‚Ä¢ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
   ‚Ä¢ –¢–∞–±—ã –∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—ã
   ‚Ä¢ –¢—É–ª—Ç–∏–ø—ã

**–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π useId –¥–ª—è:**

‚ùå key –≤ —Å–ø–∏—Å–∫–∞—Ö
‚ùå CSS –∫–ª–∞—Å—Å–æ–≤
‚ùå ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
‚ùå –°–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤

**–ó–æ–ª–æ—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ:**
useId –¥–ª—è —Å–≤—è–∑–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM, –±–æ–ª—å—à–µ –Ω–∏ –¥–ª—è —á–µ–≥–æ!`,
      code: `// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –≤—Å—ë –≤–º–µ—Å—Ç–µ
function AdvancedFormField({
  label,
  type = 'text',
  error,
  hint,
  required
}) {
  const fieldId = useId()
  const errorId = useId()
  const hintId = useId()

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –¥–ª—è aria-describedby
  const describedBy = [
    hint ? hintId : null,
    error ? errorId : null
  ].filter(Boolean).join(' ')

  return (
    <div>
      {/* Label —Å–≤—è–∑–∞–Ω —Å input */}
      <label htmlFor={fieldId}>
        {label}
        {required && ' *'}
      </label>

      {/* Input —Å–æ –≤—Å–µ–º–∏ ARIA –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ */}
      <input
        id={fieldId}
        type={type}
        aria-required={required}
        aria-invalid={!!error}
        aria-describedby={describedBy || undefined}
      />

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {hint && (
        <div id={hintId} className="hint">
          üí° {hint}
        </div>
      )}

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div id={errorId} role="alert" className="error">
          ‚ö†Ô∏è {error}
        </div>
      )}
    </div>
  )
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
<AdvancedFormField
  label="Email"
  type="email"
  required
  hint="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–±–æ—á–∏–π email"
  error={emailError}
/>

// –†–µ–∑—É–ª—å—Ç–∞—Ç - –∏–¥–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ñ–æ—Ä–º–∞! ‚úÖ
// –°–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–∑–≤—É—á–∞—Ç –≤—Å–µ —Å–≤—è–∑–∏`
    }
  ]

  return (
    <div style={{ padding: '40px', maxWidth: '1200px', margin: '0 auto' }}>
      <h1 style={{
        fontSize: '3em',
        textAlign: 'center',
        color: '#61dafb',
        marginBottom: '40px'
      }}>
        üÜî useId - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
      </h1>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º */}
      <div style={{
        display: 'flex',
        gap: '10px',
        marginBottom: '30px',
        flexWrap: 'wrap',
        justifyContent: 'center'
      }}>
        {steps.map((step, idx) => (
          <button
            key={idx}
            onClick={() => setActiveStep(idx)}
            style={{
              padding: '12px 20px',
              fontSize: '0.9em',
              backgroundColor: activeStep === idx ? '#06b6d4' : '#f5f5f5',
              color: activeStep === idx ? 'white' : '#333',
              border: `2px solid ${activeStep === idx ? '#06b6d4' : '#ddd'}`,
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: activeStep === idx ? 'bold' : 'normal',
              transition: 'all 0.3s ease',
              flex: '1 1 180px'
            }}
          >
            –®–∞–≥ {idx + 1}
          </button>
        ))}
      </div>

      {/* –¢–µ–∫—É—â–∏–π —à–∞–≥ */}
      <div style={{
        background: 'white',
        border: '3px solid #06b6d4',
        borderRadius: '20px',
        padding: '30px',
        boxShadow: '0 8px 24px rgba(0,0,0,0.15)'
      }}>
        <h2 style={{
          color: '#06b6d4',
          marginTop: 0,
          fontSize: '2em',
          marginBottom: '10px'
        }}>
          {steps[activeStep].title}
        </h2>

        <p style={{
          fontSize: '1.2em',
          color: '#666',
          fontStyle: 'italic',
          marginBottom: '20px'
        }}>
          {steps[activeStep].description}
        </p>

        <div style={{
          fontSize: '1.1em',
          lineHeight: '1.8',
          whiteSpace: 'pre-line',
          marginBottom: '20px'
        }}>
          {steps[activeStep].content}
        </div>

        {steps[activeStep].code && (
          <>
            <h3 style={{ color: '#06b6d4', fontSize: '1.4em' }}>
              üíª –ö–æ–¥:
            </h3>
            <pre style={{
              background: '#263238',
              color: '#aed581',
              padding: '20px',
              borderRadius: '10px',
              fontSize: '0.9em',
              overflow: 'auto',
              lineHeight: '1.6',
              margin: 0
            }}>
              {steps[activeStep].code}
            </pre>
          </>
        )}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div style={{
        marginTop: '30px',
        textAlign: 'center',
        color: '#666',
        fontSize: '1.1em'
      }}>
        –®–∞–≥ {activeStep + 1} –∏–∑ {steps.length}
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {activeStep === steps.length - 1 && (
        <div style={{
          marginTop: '30px',
          background: '#fff9c4',
          border: '3px solid #fbc02d',
          borderRadius: '15px',
          padding: '25px',
          textAlign: 'center'
        }}>
          <h3 style={{ color: '#f57f17', marginTop: 0, fontSize: '1.5em' }}>
            üí° –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ
          </h3>
          <p style={{ fontSize: '1.2em', lineHeight: '1.8', margin: 0 }}>
            <strong>useId –¥–ª—è —Å–≤—è–∑–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM (accessibility)</strong><br />
            –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è key, CSS –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î!
          </p>
        </div>
      )}
    </div>
  )
}

export default Slide12UseId